___ = "Fill me in!";

/*!
 * Nodeunit
 * Copyright (c) 2010 Caolan McMahon
 * MIT Licensed
 */

/**
 * Module dependencies
 */

var nodeunit = require('../nodeunit'),
    utils = require('../utils'),
    fs = require('fs'),
    path = require('path'),
    AssertionError = require('assert').AssertionError;

/**
 * Reporter info string
 */

exports.info = "Skip passed tests output";

/**
 * Run all tests within each module, reporting the results to the command-line.
 *
 * @param {Array} files
 * @api public
 */

exports.run = function (files, options, callback) {

    if (!options) {
        // load default options
        var content = fs.readFileSync(
            __dirname + '/../../bin/nodeunit.json', 'utf8'
        );
        options = JSON.parse(content);
    }

    var error = function (str) {
        return options.error_prefix + str + options.error_suffix;
    };
    var ok    = function (str) {
        return options.ok_prefix + str + options.ok_suffix;
    };
    var bold  = function (str) {
        return options.bold_prefix + str + options.bold_suffix;
    };
    var assertion_message = function (str) {
        return options.assertion_prefix + str + options.assertion_suffix;
    };

    var start = new Date().getTime();
    var paths = files.map(function (p) {
        return path.join(process.cwd(), p);
    });
    var moduleName;
    var wisdom = ['Never leave rollerskates at the top of the stairs',
    'Never play leapfrog with a unicorn', 'Its not JavaScript its what you do with it that counts',
    'Bird never lands in clenched fist', 'Dynamic languages never change',
    'Dont get mad get even', 'JavaScript wasnt built in a day- it was a weekend',
    'Never use == when === will do', 'Remember: "2" + 2 always makes a 22 in JavaScript!'
    ];

    var person = ['Ninja', 'Guru', 'Master', 'Deity', 'Sensei', 'Splinter']

    var displayedFailure = false;

    nodeunit.runFiles(paths, {
        testspec: options.testspec,
        testFullSpec: options.testFullSpec,
        moduleStart: function (name) {
            // console.log('\n' + bold(name));
            moduleName = name;
        },
        testDone: function (name, assertions) {
            if(!displayedFailure) {
                if (assertions.failures()) {
                    console.log(error(bold(moduleName + "#" + name) + " has damaged your karma.\n"));
                    console.log("The Master says:");
                    console.log("You have not yet reached enlightenment.");
                    console.log("Do not lose hope.\n");
                    console.log("Remember -");
                    console.log(wisdom[Math.floor(Math.random() * wisdom.length)]);
                    console.log("\nThe answers you seek:");

                    assertions.forEach(function (a) {
                        if (a.failed()) {
                            displayedFailure = true;
                            a = utils.betterErrors(a);
                            if (a.error instanceof AssertionError && a.message) {
                                console.log(
                                    'Assertion Message: ' + assertion_message(a.message)
                                );
                            }
                            var clues = a.error.stack.split('\n');
                            var problem = clues[0].replace("AssertionError: ", "");
                            var line_number = clues[2].match(/\d+/)[0];
                            console.log(problem + " on line " + line_number);
                        }
                    });
                }
                else {
                    console.log(ok("✔ " + name));
                }
            }
        },
        moduleDone: function (name, assertions) {
            if (!assertions.failures()) {
                console.log('✔ all tests passed');
                console.log("\nThe Master says:");
                console.log('You are a JavaScript ' + person[Math.floor(Math.random() * person.length)] + '!')
            }
            else {
                console.log(error('✖ Keep going!'));
            }
        },
        done: function (assertions) {
            var end = new Date().getTime();
            var duration = end - start;
            if (assertions.failures()) {
                console.log(
                    //'\n' + bold(error('FAILURES: ')) + assertions.failures() +
                    '\nPlease meditate on the code\n'

                );
            }
            else {
                console.log(
                    '\n' + bold(ok('OK: ')) + assertions.length +
                    ' assertions (' + assertions.duration + 'ms)'
                );
            }

            if (callback) callback(assertions.failures() ? new Error('We have got test failures.') : undefined);
        }
    });
};
